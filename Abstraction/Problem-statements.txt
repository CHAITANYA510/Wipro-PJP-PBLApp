-------------------Abstract Class----------------------

[Abstract Class]
1.
 Create an abstract class Compartment to represent a rail coach.
Provide an abstract function notice in this class.
public abstract String notice();
Derive FirstClass, Ladies, General, Luggage classes from the
compartment class. Override the notice function in each of them to
print notice message that is suitable to the specific type of
compartment.
Create a class TestCompartment.Write main function to do the
following:
Declare an array of Compartment of size 10.
Create a compartment of a type as decided by a randomly generated
integer in the range 1 to 4.
Check the polymorphic behavior of the notice method.
[i.e based on the random number genererated, the first
compartment can be Luggage, the second one could be Ladies and so
on..]

-------------------Packages----------------------

[Packages Access control Using package]
1.  Create a package called test package.
Define a class called foundation inside the test package.
Inside the class, you need to define 4 integer variables:
var1 with private access modifier
var2 with default access modifier
var3 with protected access modifier
var4 with public access modifier
Import this class and packages in another class.
Try to access all 4 variables of the foundation class and see what
variables are accessible and what are not accessible.


[Packages user defined package]
2
 Create a class called compartment which represents the ship
compartments with attributes like height, width and breadth.
Take care it should not conflict with the compartment class you
have created in Abstract class exercise 2.
To avoid conflict create this class in a new package called
com.wipro.automobile.ship 

3
 Create a package called com.automobile. Define an abstract class
called Vehicle.
Vehicle class has the following abstract methods:
public String getModelName()
public String getRegistrationNumber()
public String getOwnerName()
Create twowheeler subpackage under automobile package
Hero class extends automobile.vehicle class with the following
methods
public int getSpeed()
– returns the current speed of the vehicle.
public void radio()
– provides facility to control the radio device
Honda class extends com.automobile.vehicle class with the
following methods
public int getSpeed()
– Returns the current speed of the vehicle.
public void cdplayer()
– provides facility to control the cd player device which is
available in the car.
Create a test class to test the methods available in all these
child class.

4
 Add the following ideas to the previous hands on:
Create FourWheeler subpackage under automobile package
Logan class extends com.automobile.Vehicle class
public int speed()
– Returns the current speed of the vehicle.
public int gps()
– provides facility to control the gps device
Ford class extends com.automobile.Vehicle class
public int speed()
– Returns the current speed of the vehicle.
public int tempControl()
– provides facility to control the air conditioning device which
is available in the car
Create objects of the relevant classes and test the various
functionalities of the class.


-------------------Interfaces----------------------

[Interfaces]
1.
 Write an interface called Playable, with a method
void play();
Let this interface be placed in a package called music.
Write a class called Veena which implements Playable interface.
Let this class be placed in a package music.string
Write a class called Saxophone which implements Playable
interface. Let this class be placed in a package music.wind
Write another class Test in a package called live. Then,
a. Create an instance of Veena and call play() method
b. Create an instance of Saxophone and call play() method
c. Place the above instances in a variable of type Playable and
then call play()




-------------------Exception Handling----------------------

[Exception Handling: Try-catch Use multiple catch block]
1
Write a program that takes as input the size of the array and the
elements in the array. The program then asks the user to enter a
particular index and prints the element at that index. Index
starts from zero.
This program may generate Array Index Out Of Bounds Exception or
NumberFormatException . Use exception handling mechanisms to
handle this exception.
Sample Input and Output 1:
Enter the number of elements in the array
2
Enter the elements in the array
50
80
Enter the index of the array element you want to access
1
The array element at index 1 = 80
The array element successfully accessed
 Sample Input and Output 2:
Enter the number of elements in the array
2
Enter the elements in the array
50
80
Enter the index of the array element you want to access
9
java.lang.ArrayIndexOutOfBoundsException
 Sample Input and Output 3:
Enter the number of elements in the array
2
Enter the elements in the array
30
j
java.lang.NumberFormatException


[Exception Handling: throws]

2
 Write a class MathOperation which accepts 5 integers through
command line. Create an array using these parameters. Loop through
the array and obtain the sum and average of all the elements and
display the result.
Various exceptions that may arise like ArithmeticException,
NumberFormatException, and so on should be handled.

[Exception Handling: Throw & Used Defined Exception]
3
Write a Program to take care of Number Format Exception if user
enters values other than integer for calculating average marks of
2 students. The name of the students and marks in 3 subjects are
taken from the user while executing the program.
In the same Program write your own Exception classes to take care
of Negative values and values out of range (i.e. other than in the
range of 0-100)

[Exception Handling: Throw & Used Defined Exception and throw]
4
A student portal provides user to register their profile. During
registration the system needs to validate the user should be
located in India. If not the system should throw an exception.
Step 1: Create a user defined exception class named
“InvalidCountryException”.
Step 2: Overload the respective constructors.
Step 3: Create a main class “UserRegistration”, add the following
method,
void registerUser(String username,String userCountry) with the
below implementation
• if userCountry is not equal to “India” throw a
InvalidCountryException with the message “User Outside India
cannot be registered”
• if userCountry is equal to “India”, print the message “User
registration done successfully”
Invoke the method registerUser from the main method with the data
specified and see how the program behaves.
Example1)
i/p:Mickey,US
o/p:InvalidCountryException should be thrown.
The message should be “User Outside India cannot be registered”
Example2)
i/p:Mini,India
o/p:User registration done successfully

5
Write a program to accept name and age of a person from the
command prompt(passed as arguments when you execute the class) and
ensure that the age entered is >=18 and < 60.
Display proper error messages.
The program must exit gracefully after displaying the error
message in case the arguments passed are not proper.
 (Hint : Create a user defined exception class for handling
errors.)


